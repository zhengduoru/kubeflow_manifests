apiVersion: caching.internal.knative.dev/v1alpha1
kind: Image
metadata:
  labels:
    app.kubernetes.io/component: knative-serving-install
    app.kubernetes.io/name: knative-serving-install
    kustomize.component: knative
    serving.knative.dev/release: v0.14.3
  name: queue-proxy
  namespace: knative-serving
spec:
  image: registry.cn-shenzhen.aliyuncs.com/tensorbytes/knative-serving-queue:v0.14.3
---
apiVersion: v1
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # List of repositories for which tag to digest resolving should be skipped
    registriesSkippingTagResolving: "ko.local,dev.local"
  queueSidecarImage: registry.cn-shenzhen.aliyuncs.com/tensorbytes/knative-serving-queue:v0.14.3
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: knative-serving-install
    app.kubernetes.io/name: knative-serving-install
    kustomize.component: knative
    serving.knative.dev/release: v0.14.3
  name: config-deployment
  namespace: knative-serving
---

apiVersion: v1
data:
  agent: |-
    {
        "image" : "kfserving/agent:v0.5.1",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1"
    }
  batcher: |-
    {
        "image" : "kfserving/agent:v0.5.1",
        "memoryRequest": "1Gi",
        "memoryLimit": "1Gi",
        "cpuRequest": "1",
        "cpuLimit": "1"
    }
  credentials: |-
    {
       "gcs": {
           "gcsCredentialFileName": "gcloud-application-credentials.json"
       },
       "s3": {
           "s3AccessKeyIDName": "AWS_ACCESS_KEY_ID",
           "s3SecretAccessKeyName": "AWS_SECRET_ACCESS_KEY"
       }
    }
  explainers: |-
    {
        "alibi": {
            "image" : "kfserving/alibi-explainer",
            "defaultImageVersion": "v0.5.1"
        },
        "aix": {
            "image" : "kfserving/aix-explainer",
            "defaultImageVersion": "v0.5.1"
        },
        "art": {
            "image" : "kfserving/art-explainer",
            "defaultImageVersion": "v0.5.1"
        }
    }
  ingress: |-
    {
        "ingressGateway" : "kubeflow-gateway.kubeflow",
        "ingressService" : "istio-ingressgateway.istio-system.svc.cluster.local",
        "localGateway" : "cluster-local-gateway.knative-serving",
        "localGatewayService" : "cluster-local-gateway.istio-system.svc.cluster.local"
    }
  logger: |-
    {
        "image" : "kfserving/agent:v0.5.1",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1",
        "defaultUrl": "http://default-broker"
    }
  predictors: |-
    {
        "tensorflow": {
            "image": "tensorflow/serving",
            "defaultImageVersion": "1.14.0",
            "defaultGpuImageVersion": "1.14.0-gpu",
            "defaultTimeout": "60",
            "supportedFrameworks": [
              "tensorflow"
            ],
            "multiModelServer": false
        },
        "onnx": {
            "image": "mcr.microsoft.com/onnxruntime/server",
            "defaultImageVersion": "v1.0.0",
            "supportedFrameworks": [
              "onnx"
            ],
            "multiModelServer": false
        },
        "sklearn": {
          "v1": {
            "image": "registry.cn-shenzhen.aliyuncs.com/tensorbytes/sklearnserver",
            "defaultImageVersion": "v0.5.1",
            "supportedFrameworks": [
              "sklearn"
            ],
            "multiModelServer": false
          },
          "v2": {
            "image": "docker.io/seldonio/mlserver",
            "defaultImageVersion": "0.2.1",
            "supportedFrameworks": [
              "sklearn"
            ],
            "multiModelServer": false
          }
        },
        "xgboost": {
          "v1": {
            "image": "registry.cn-shenzhen.aliyuncs.com/tensorbytes/xgbserver",
            "defaultImageVersion": "v0.5.1",
            "supportedFrameworks": [
              "xgboost"
            ],
            "multiModelServer": false
          },
          "v2": {
            "image": "docker.io/seldonio/mlserver",
            "defaultImageVersion": "0.2.1",
            "supportedFrameworks": [
              "xgboost"
            ],
            "multiModelServer": false
          }
        },
        "pytorch": {
          "v1" : {
            "image": "registry.cn-shenzhen.aliyuncs.com/tensorbytes/pytorchserver",
            "defaultImageVersion": "v0.5.1",
            "defaultGpuImageVersion": "v0.5.1-gpu",
            "supportedFrameworks": [
              "pytorch"
            ],
            "multiModelServer": false
          },
          "v2" : {
            "image": "kfserving/torchserve-kfs",
            "defaultImageVersion": "0.3.0",
            "defaultGpuImageVersion": "0.3.0-gpu",
            "supportedFrameworks": [
              "pytorch"
            ],
            "multiModelServer": false
          }
        },
        "triton": {
            "image": "nvcr.io/nvidia/tritonserver",
            "defaultImageVersion": "20.08-py3",
            "supportedFrameworks": [
              "tensorrt",
              "tensorflow",
              "onnx",
              "pytorch",
              "caffe2"
            ],
            "multiModelServer": false
        },
        "pmml": {
            "image": "kfserving/pmmlserver",
            "defaultImageVersion": "v0.5.1",
            "supportedFrameworks": [
              "pmml"
            ],
            "multiModelServer": false
        },
        "lightgbm": {
            "image": "kfserving/lgbserver",
            "defaultImageVersion": "v0.5.1",
            "supportedFrameworks": [
              "lightgbm"
            ],
            "multiModelServer": false
        }
    }
  storageInitializer: |-
    {
        "image" : "registry.cn-shenzhen.aliyuncs.com/tensorbytes/storage-initializer:v0.5.1",
        "memoryRequest": "100Mi",
        "memoryLimit": "1Gi",
        "cpuRequest": "100m",
        "cpuLimit": "1"
    }
  transformers: |-
    {
    }
kind: ConfigMap
metadata:
  labels:
    app: kfserving
    app.kubernetes.io/component: kfserving
    app.kubernetes.io/name: kfserving
    kustomize.component: kfserving
  name: inferenceservice-config
  namespace: kubeflow